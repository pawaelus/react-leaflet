{"version":3,"sources":["components/Map.js","App.js","serviceWorker.js","index.js"],"names":["style","height","width","DefaultIcon","L","icon","iconUrl","shadowUrl","iconShadow","iconSize","iconAnchor","popupAnchor","shadowSize","Marker","prototype","options","Map","props","getReportColor","type","getClassValue","addLayer","poj","addTo","map","removeLayer","removeFrom","onMapClick","e","setState","point","latlng","targetPoint","turf","lat","lng","nearest","points","console","log","properties","id","baseState","fetch","method","redirect","headers","then","response","json","data","data_station","JSON","stringify","values","state","stIndexLevel","indexLevelName","currentPositionMarker","setLatLng","setIcon","BeautifyIcon","iconShape","textColor","size","borderWidth","borderColor","backgroundColor","bindPopup","catch","err","distanceToPoint","nearestStationMarker","geometry","coordinates","distanceLine","setLatLngs","parseFloat","bindTooltip","openTooltip","dataString","gios","lol","this","tileLayer","wms","layers","maxZoom","format","transparent","attribution","osm","center","zoom","meteoPoints","requestOptions","forEach","element","push","gegrLat","gegrLon","circleMarker","radius","_points","name","stationName","on","marker","polyline","Array","control","idwLayer","opacity","cellSize","exp","max","gradient","0","0.2","0.4","0.6","0.8","1","position","collapsed","markerPosition","React","Component","App","moveMarker","Math","floor","random","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.c16279fe.chunk.js","sourcesContent":["import React from 'react';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport 'leaflet-draw/dist/leaflet.draw-src'\nimport 'leaflet-draw/dist/leaflet.draw-src.css'\nimport * as turf from '@turf/turf'\nimport icon from 'leaflet/dist/images/marker-icon.png';\nimport iconShadow from 'leaflet/dist/images/marker-shadow.png';\n\nimport 'beautifymarker/leaflet-beautify-marker-icon'\nimport 'beautifymarker/leaflet-beautify-marker-icon.css'\n//\nimport 'leaflet.idw/src/leaflet-idw'\nimport 'leaflet.idw/src/leaflet-idw-directdraw'\n\n\nimport 'font-awesome/css/font-awesome.css'\n\nconst style = {\n    height: \"100vh\",\n    width: \"100vw\"\n};\n\n\nlet DefaultIcon = L.icon({\n    iconUrl: icon,\n    shadowUrl: iconShadow,\n    iconSize: [25, 41],\n    iconAnchor: [12, 41],\n    popupAnchor: [1, -34],\n    shadowSize: [41, 41]\n});\n\nL.Marker.prototype.options.icon = DefaultIcon;\n\n\nclass Map extends React.Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            point: null,\n            gios: [],\n            dataString: {},\n            lol: {},\n            values: {}\n        }\n        this.baseState = this.state\n\n    }\n\n    getReportColor = (type) => {\n        switch (type) {\n            case 'Bardzo dobry':\n                return \"#07a001\"\n            case 'Dobry':\n                return \"#6aff00\"\n            case 'Umiarkowany':\n                return \"#ffd400\"\n            case 'Dostateczny':\n                return \"#ff9a00\"\n            case 'Zły':\n                return \"#ff0000\"\n            case 'Bardzo zły':\n                return \"#840707\"\n            case 'Brak indeksu':\n                return \"#6d6d6d\"\n\n        }\n    }\n\n    getClassValue = (type) => {\n        switch (type) {\n            case 'Bardzo dobry':\n                return 6\n            case 'Dobry':\n                return 5\n            case 'Umiarkowany':\n                return 4\n            case 'Dostateczny':\n                return 3\n            case 'Zły':\n                return 2\n            case 'Bardzo zły':\n                return 1\n            case 'Brak indeksu':\n                return 0\n\n        }\n    }\n\n    addLayer = () => {\n        this.poj.addTo(this.map)\n        // alert('lol')\n\n    }\n\n    removeLayer = () => {\n        this.poj.removeFrom(this.map)\n\n\n    }\n\n\n    onMapClick = (e) => {\n\n        this.setState({point: e.latlng})\n        // this.points.push(turf.point([e.latlng.lat, e.latlng.lng ], {a:1}));\n        // _points.push(turf.point(l._layers[feat].feature.geometry.coordinates));\n        this.targetPoint = turf.point([e.latlng.lat, e.latlng.lng], {\"marker-color\": \"#0F0\"});\n\n        var nearest = turf.nearestPoint(this.targetPoint, this.points);\n        console.log('nearest')\n        console.log(nearest.properties.id)\n        // console.log(nearest.properties)\n\n        // this.dataString = \"jo\"\n        this.setState(this.baseState)\n        fetch('https://api.gios.gov.pl/pjp-api/rest/station/sensors/' + nearest.properties.id, {\n            method: 'GET',\n            redirect: 'follow',\n            headers: {\n                'Content-Type': 'application/json',\n                'Access-Control-Allow-Origin': '*',\n                'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE'\n            }\n        })\n            .then((response) => {\n                response.json().then((data) => {\n                    // console.log(data)\n                    // data.forEach((element, index) => {\n                    // console.log(element)\n                    // http://api.gios.gov.pl/pjp-api/rest/data/getData/92\n                    // http://api.gios.gov.pl/pjp-api/rest/aqindex/getIndex/52\n\n                    // fetch('http://api.gios.gov.pl/pjp-api/rest/aqindex/getIndex/'+element.stationId)\n                    fetch('https://api.gios.gov.pl/pjp-api/rest/aqindex/getIndex/' + nearest.properties.id, {\n                        method: 'GET',\n                        redirect: 'follow',\n                        headers: {\n                            'Content-Type': 'application/json',\n                            'Access-Control-Allow-Origin': '*',\n                            'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE'\n                        }\n                    })\n                        .then((response) => {\n                            response.json().then((data_station) => {\n                                console.log(JSON.stringify(data_station))\n                                // alert(JSON.stringify(data_station))\n                                // this.currentPositionMarker.setLatLng(e.latlng)\n                                // .bindPopup(JSON.stringify(data_station))\n                                // .openPopup()\n\n\n                                this.setState({\n                                    // values: { ...this.state.values, [data_station.id]: data_station }\n\n                                    // values: { ...this.state.values, [index+'_'+data_station.id]: data_station.stIndexLevel }\n                                    values: {...this.state.values, [data_station.id]: data_station.stIndexLevel}\n                                })\n\n                                console.log(this.getReportColor(data_station.stIndexLevel.indexLevelName))\n                                console.log(data_station.stIndexLevel.indexLevelName)\n                                // console.log(data_station.stIndexLevel.stIndexLevelName)\n\n\n                                this.currentPositionMarker.setLatLng(e.latlng)\n                                    .setIcon(\n                                        L.BeautifyIcon.icon({\n                                            icon: \"trash-o\",\n                                            iconShape: \"marker\",\n                                            textColor: this.getReportColor(data_station.stIndexLevel.indexLevelName),\n                                            size: [33, 44],\n                                            borderWidth: \"3\",\n                                            // borderStyle: \"dotted\",\n                                            borderColor: this.getReportColor(data_station.stIndexLevel.indexLevelName),\n                                            // textColor: \"rgba(2,48,61,0.61,0.5)\",\n                                            backgroundColor: this.getReportColor(data_station.stIndexLevel.indexLevelName),\n                                        })\n                                    )\n                                    .bindPopup(data_station.stIndexLevel.indexLevelName)\n                                // .openPopup()\n\n                            }).catch((err) => {\n                                console.log(err);\n                            })\n                        });\n\n\n                    // })\n\n                }).catch((err) => {\n                    console.log(err);\n                })\n            });\n\n\n        // console.log(JSON.stringify(nearest.geometry.coordinates))\n        // console.log([e.latlng.lat, e.latlng.lng])\n        console.log(nearest.properties.distanceToPoint)\n        // new L.circle([e.latlng.lat, e.latlng.lng],\n        //     radius: nearest.properties.distanceToPoint)\n        //     .addTo(this.map)\n        // L.circle([e.latlng.lat, e.latlng.lng], {radius: nearest.properties.distanceToPoint*1000}).addTo(this.map);\n        this.nearestStationMarker.setLatLng(nearest.geometry.coordinates)\n\n        this.distanceLine.setLatLngs([\n            [e.latlng.lat, e.latlng.lng],\n            [parseFloat(nearest.geometry.coordinates[0]), parseFloat(nearest.geometry.coordinates[1])]\n        ])\n        this.distanceLine.bindTooltip(JSON.stringify(nearest.properties.distanceToPoint))\n            .openTooltip()\n\n\n        console.log(this.state.dataString)\n\n        this.currentPositionMarker.setLatLng(e.latlng)\n            .bindPopup(JSON.stringify(this.state.values))\n            .setIcon(\n                L.BeautifyIcon.icon({\n                    icon: \"trash-o\",\n                    iconShape: \"marker\",\n                    textColor: \"transparent\",\n                    size: [33, 44],\n                    borderWidth: \"3\",\n                    // borderStyle: \"dotted\",\n                    borderColor: \"transparent\",\n                    // textColor: \"rgba(2,48,61,0.61,0.5)\",\n                    backgroundColor: \"transparent\",\n                })\n            )\n        // .openPopup()\n\n        // console.log([[e.latlng.lat, e.latlng.lng], [nearest.geometry.coordinates[0], nearest.geometry.coordinates[1]]])\n        // console.log('points')\n        // // console.log([e.latlng])\n        // console.log(this.points)\n\n    }\n\n\n    componentDidMount() {\n        // create map\n        this.poj = L.tileLayer.wms('https://193.201.34.28/hackathon/wms', {\n            layers: 'pojemniki',\n            maxZoom: 21,\n            format: 'image/png',\n            transparent: true,\n            attribution: \"ep\"\n        });\n\n\n        var osmUrl = 'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\n            osmAttrib = '&copy; <a href=\"http://openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n            osm = L.tileLayer(osmUrl, {maxZoom: 18, attribution: osmAttrib})\n\n\n        this.map = L.map('map', {\n            center: [51.8419, 21.0315],\n            zoom: 5,\n            layers: [\n                L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {\n                    attribution: '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                })\n\n            ]\n        });\n\n\n        var meteoPoints = [];\n\n\n        const requestOptions = {\n            method: 'GET',\n            redirect: 'follow',\n            headers: {\n                'Content-Type': 'application/json',\n                'Access-Control-Allow-Origin': '*',\n                'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE'\n            }\n        };\n\n        fetch('https://api.gios.gov.pl/pjp-api/rest/station/findAll', requestOptions)\n            .then((response) => {\n                response.json().then((data) => {\n                    console.log(data)\n                    console.log('meteo')\n                    console.log(data)\n                    data.forEach((element) => {\n                        //\n                        console.log(element.id)\n\n                        fetch('https://api.gios.gov.pl/pjp-api/rest/aqindex/getIndex/' + element.id, requestOptions)\n                            .then((response) => {\n                                response.json().then((data_station) => {\n                                    if (data_station.stIndexLevel.indexLevelName !== 'Brak indeksu') {\n                                        meteoPoints.push([element.gegrLat, element.gegrLon, this.getClassValue(data_station.stIndexLevel.indexLevelName)])\n                                    }\n                                    // if (data_station.stIndexLevel.indexLevelName == null){\n                                    //     console.log(data_station.stIndexLevel)\n                                    // }\n                                    // console.log(data_station.stIndexLevel.indexLevelName)\n                                    // }\n                                    // meteoPoints.push([element.gegrLat, element.gegrLon, this.getClassValue(data_station.stIndexLevel.indexLevelName)])\n                                    // console.log(JSON.stringify(data_station.stIndexLevel.indexLevelName))\n                                })\n                            })\n\n                        // meteoPoints.push([element.gegrLat, element.gegrLon, Math.random() * 10])\n                        console.log(meteoPoints)\n\n\n                        // console.log(element)\n                        L.circleMarker([element.gegrLat, element.gegrLon], {radius: 2}).addTo(this.map);\n                        this._points.push(turf.point(\n                            [element.gegrLat, element.gegrLon],\n                            {\n                                id: element.id,\n                                name: element.stationName,\n                                // prop: element.commune\n                            }));\n                    })\n                    // zgloszenia_wfs.addData(data)\n                    console.log(meteoPoints)\n                }).catch((err) => {\n                    console.log(err);\n                })\n            });\n\n\n        this.map.on('click', this.onMapClick);\n\n        this.currentPositionMarker = new L.marker([-90, -90])\n            .addTo(this.map);\n        this.nearestStationMarker = new L.marker([0, 0])\n            .setIcon(\n                L.BeautifyIcon.icon({\n                    icon: \"\",\n                    iconShape: \"circle\",\n                    textColor: \"#3c5c57\",\n                    size: [10, 10],\n                    borderWidth: \"3\",\n                    // borderStyle: \"dotted\",\n                    borderColor: \"#3c5c57\",\n                    // textColor: \"rgba(2,48,61,0.61,0.5)\",\n                    backgroundColor: \"transparent\",\n                })\n            ).addTo(this.map);\n\n        this.distanceLine = new L.polyline([[0, 0], [0, 0]]).addTo(this.map)\n        // this.marker = new L.circleMarker(this.props.markerPosition).addTo(this.map);\n\n\n        this._points = Array();\n\n        // this.targetPoint = turf.point([28.965797, 41.010086], {\"marker-color\": \"#0F0\"});\n        // this.points = turf.featureCollection([\n        //     turf.point([28.973865, 41.011122]),\n        //     turf.point([28.948459, 41.024204]),\n        //     turf.point([28.938674, 41.013324])\n        // ]);\n\n        this.points = turf.featureCollection(this._points);\n\n        // this._points.push(turf.point([1,1], {a:1}));\n\n\n        // var nearest = turf.nearestPoint(targetPoint, points);\n\n\n        console.log('turf test')\n        // console.warn(nearest)\n\n        L.control.layers({\n            'osm': osm.addTo(this.map),\n            \"google\": L.tileLayer('https://www.google.cn/maps/vt?lyrs=s@189&gl=cn&x={x}&y={y}&z={z}', {\n                attribution: 'google'\n            })\n        }, {\n            // 'drawlayer': drawnItems\n            'wioś': L.idwLayer(meteoPoints, {\n                opacity: 0.6,\n                maxZoom: 18,\n                cellSize: 10,\n                exp: 1,\n                max: 6,\n                gradient: {\n                    0: '#ffffff',\n                    0.2: '#840707',\n                    0.4: '#ff5f05',\n                    0.6: '#ffd500',\n                    0.8: '#048b2d',\n                    1: '#066303'\n                }\n            }),\n        }, {position: 'topleft', collapsed: false}).addTo(this.map);\n\n\n        // 6:'#07a001',\n        //     5:'#6aff00',\n        //     4:'#ffd400',\n        //     3:'#ff9a00',\n        //     2:'#ff0000',\n        //     1:'#840707',\n        //     0:'#6d6d6d',\n\n\n    }\n\n    componentDidUpdate({markerPosition}) {\n        // check if position has changed\n        if (this.props.markerPosition !== markerPosition) {\n            this.marker.setLatLng(this.props.markerPosition);\n        }\n    }\n\n    render() {\n        return <div>\n            <div id=\"map\" zoom={this.zoom} style={style}></div>\n            {/*<button onClick={this.addLayer}>addLayer</button>*/}\n            {/*<button onClick={this.removeLayer}>addLayer</button>*/}\n        </div>\n    }\n}\n\nexport default Map;","import React from 'react';\nimport './App.css';\nimport Map from './components/Map';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {markerPosition: { lat: 51.8419, lng: 21.0315 }}\n    }\n\n    moveMarker = () => {\n        const { lat, lng } = this.state.markerPosition;\n        this.setState({\n            markerPosition: {\n                lat: lat + Math.floor(Math.random() * 10),\n                lng: lng + Math.floor(Math.random() * 10),\n            }\n        });\n    };\n\n\n\n    render() {\n        const { markerPosition } = this.state;\n\n        return(\n            <div>\n            {/*<AppBar position=\"static\">*/}\n            {/*<Toolbar>*/}\n            {/*    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">*/}\n            {/*        <MenuIcon />*/}\n            {/*    </IconButton>*/}\n            {/*    <Button  color=\"inherit\"  aria-haspopup=\"true\" onClick={this.moveMarker}>*/}\n            {/*        moveCircleMarker*/}\n            {/*    </Button>*/}\n\n            {/*</Toolbar>*/}\n        {/*</AppBar>*/}\n\n\n        <Map markerPosition={markerPosition} />\n\n        {/*<button  onClick={this.moveMarker}>p_button</button>*/}\n            </div>\n        )\n\n\n    }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}